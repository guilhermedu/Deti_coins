Arquiteturas de Alto Desempenho 2024/2025 AAD_A1

Arquiteturas de Alto Desempenho 2024/2025

Complementos sobre Arquiteturas de Computadores 2024/2025

First practical assignment — mining DETI coins

Tomás Oliveira e Silva

1. Introduction
A DETI coin is a file with exactly 52 bytes whose MD5 message-digest, when printed in hexadecimal, ends with at least 8 hexadecimal zeros (i.e., its last 32 bits are all 0). The file contents must begin with "DETI coin " (note the space at the end) and must end with a newline ('\n' in C). The other bytes may have arbitrary values, but it is strongly recommended that these other bytes encode utf-8 text.

Let n be the number of zero bits at the end of the printed MD5 message-digest; that is its "power." As stated before, for a DETI coin, we must have n > 32. Given that the probability of finding a DETI coin of power n using a file with random content is 1 in 2^n, a power n DETI coin is worth 2^(n−32) power 32 DETI coins.

For example, the MD5 message-digest of the file deti_coin_example.txt:

$ od -Ad -c -t x1 deti_coin_example.txt

0000000 D E T I c o i n n u m b e
        44 45 54 49 20 63 6f 69 6e 20 20 6e 75 6d 62 65
0000016 r o f t h e a t t e m p t
        72 20 6f 66 20 74 68 65 20 61 74 74 65 6d 70 74
0000032 [ 0 0 0 0 0 0 5 3 3 8 2 8 5
        20 20 5b 30 30 30 30 30 30 35 33 33 38 32 38 35
0000048 7 1 ] \n
        37 31 5d 0a
0000052

$ md5sum deti_coin_example.txt
c0b9d8c5d2c98be1296bc13500000000 deti_coin_example.txt

So, it is a power 32 DETI coin (the MD5 message-digest ends with 500000000, and 5 has 0 consecutive low order zero bits).

2. What is provided
The following files contain a reference implementation of the assignment. Study them in detail!

deti_coin_example.txt — The example given above of a DETI coin. It was computed with a custom version (in deti_coins_cpu_special_search.h, not provided!) of deti_coins_cpu_search.h.
deti_coins.c — The main program, including most of the code from other files.
cpu_utilities.h — Code used by other parts of the program (reversing byte order in an integer, time measurements, etc.).
md5.h — The implementation of the MD5 message-digest for a 52-byte message. It can be adapted as needed for CPU or CUDA use.
md5_test_data.h — Generates random data for testing the MD5 message-digest.
md5_cpu.h — Reference implementation of the MD5 message-digest computation on the CPU (no SIMD instructions).
md5_cpu_avx.h — MD5 implementation on the CPU using AVX instructions (for Intel and AMD processors).
md5_cpu_neon.h — MD5 implementation on the CPU using NEON instructions (for Arm processors).
cuda_driver_api_utilities.h — Code for initializing a CUDA device, loading a kernel function, allocating memory, and running the kernel.
md5_cuda_kernel.cu — Device code for MD5 computation using CUDA. Modify it to reduce data movement between CPU and GPU for efficiency.
md5_cuda.h — CPU code for MD5 computation using CUDA.
deti_coins_vault.h — Code to buffer and save found DETI coins.
deti_coins_cpu_search.h — Reference implementation for searching DETI coins on one CPU thread, without SIMD instructions.
test_vault.bash — Bash script to test the file saving DETI coins.
makefile — Makefile for the assignment; modify it as necessary when adding code files.

3. What is to be done
Each group should try accomplishing as much as possible from the following:

Task 1.Convert AVX code to AVX2 code (expecting doubled speed).
Task 2.Write search functions using AVX, AVX2, and, if available, NEON code.
Task 3.Write a search function using CUDA.
Task 4.Use SIMD instructions with OpenMP.
Task 5.Use a server-client setup.
Task 6.Implement using WebAssembly.
Task 7.Experiment with an OpenCL implementation.

Task 8.For each approach, measure the number of attempts per hour (e.g., 5.6 × 10^13 attempts per hour on a GTX 1660 Ti).
Task 9.Compare performance across various computing devices.
Task 10.Search for DETI coins with a specific form, such as including part of your name.
Task 11.Optional tasks, such as computing histograms of values returned by deti_coin_power() or the wall time for each CUDA search kernel call.


4. Deliverable
Submit a single archive (compressed TAR or ZIP format) containing:

The report (in PDF format).
All source code (no executables).
The archive name should be formatted as NNNNNN_MMMMMM.extension where NNNNNN and MMMMMM represent student numbers, and extension is either tgz or zip.


